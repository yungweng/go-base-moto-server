components:
  schemas:
    Ag:
      properties:
        ag_category:
          $ref: '#/components/schemas/AgCategory'
        datespan:
          $ref: '#/components/schemas/Datespan'
        id:
          format: int64
          type: integer
        is_open_ag:
          type: boolean
        max_participant:
          type: integer
        name:
          type: string
        supervisor:
          $ref: '#/components/schemas/PedagogicalSpecialist'
        timeslots:
          items:
            $ref: '#/components/schemas/AgTime'
          type: array
      type: object
    AgCategory:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    AgTime:
      properties:
        id:
          format: int64
          type: integer
        timespan:
          $ref: '#/components/schemas/Timespan'
        weekday:
          type: integer
      type: object
    CombinedGroup:
      properties:
        access_policy:
          description: Determines which pedagogical specialists have access to this
            combined group
          enum:
          - all
          - first
          - specific
          - manual
          type: string
        access_specialists:
          items:
            $ref: '#/components/schemas/PedagogicalSpecialist'
          type: array
        created_at:
          format: date-time
          type: string
        groups:
          items:
            $ref: '#/components/schemas/Group'
          type: array
        id:
          format: int64
          type: integer
        is_active:
          type: boolean
        name:
          type: string
        specific_group:
          $ref: '#/components/schemas/Group'
          nullable: true
        valid_until:
          format: date-time
          nullable: true
          type: string
      type: object
    CustomUser:
      properties:
        first_name:
          type: string
        id:
          format: int64
          type: integer
        second_name:
          type: string
        tag_id:
          nullable: true
          type: string
      type: object
    Datespan:
      properties:
        enddate:
          format: date-time
          type: string
        id:
          format: int64
          type: integer
        startdate:
          format: date-time
          type: string
      type: object
    Error:
      properties:
        detail:
          type: string
      type: object
    Feedback:
      properties:
        day:
          format: date
          type: string
        feedback_value:
          type: integer
        id:
          format: int64
          type: integer
        mensa_feedback:
          type: boolean
        student:
          $ref: '#/components/schemas/StudentList'
        time:
          format: time
          type: string
      type: object
    Group:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        representative:
          $ref: '#/components/schemas/PedagogicalSpecialist'
        room:
          format: int64
          type: integer
        room_name:
          type: string
        supervisor:
          items:
            $ref: '#/components/schemas/PedagogicalSpecialist'
          type: array
      type: object
    PedagogicalSpecialist:
      properties:
        custom_user:
          $ref: '#/components/schemas/CustomUser'
        id:
          format: int64
          type: integer
        is_password_otp:
          type: boolean
        role:
          type: string
        user_id:
          format: int64
          type: integer
      type: object
    Room:
      properties:
        activity:
          type: string
        building:
          type: string
        capacity:
          type: integer
        category:
          type: string
        color:
          type: string
        floor:
          type: integer
        id:
          format: int64
          type: integer
        occupied:
          type: boolean
        room_name:
          type: string
      required:
      - room_name
      type: object
    RoomHistory:
      properties:
        ag_category:
          $ref: '#/components/schemas/AgCategory'
        ag_name:
          type: string
        day:
          format: date
          type: string
        id:
          format: int64
          type: integer
        max_participant:
          type: integer
        room:
          $ref: '#/components/schemas/Room'
        supervisor:
          $ref: '#/components/schemas/PedagogicalSpecialist'
        timespan:
          $ref: '#/components/schemas/Timespan'
      type: object
    RoomOccupancy:
      properties:
        ag:
          nullable: true
          type: integer
        device_id:
          type: string
        group:
          nullable: true
          type: integer
        id:
          format: int64
          type: integer
        supervisor:
          items:
            type: integer
          type: array
        timespan:
          type: integer
      type: object
    RoomOccupancyDetail:
      properties:
        ag:
          nullable: true
          properties:
            category:
              nullable: true
              type: string
            max_participant:
              type: integer
            name:
              type: string
          type: object
        room:
          properties:
            capacity:
              type: integer
            floor:
              type: integer
            room_name:
              type: string
          type: object
        supervisor:
          items:
            properties:
              first_name:
                type: string
              id:
                format: int64
                type: integer
              second_name:
                type: string
            type: object
          type: array
        timespan:
          properties:
            endtime:
              format: time
              nullable: true
              type: string
            starttime:
              format: time
              type: string
          type: object
      type: object
    Setting:
      properties:
        category:
          description: Category the setting belongs to
          type: string
        created_at:
          description: Timestamp when the setting was created
          format: date-time
          type: string
        description:
          description: Description of the setting
          type: string
        id:
          description: Unique identifier for the setting
          format: int64
          type: integer
        key:
          description: Unique key identifying the setting
          type: string
        modified_at:
          description: Timestamp when the setting was last modified
          format: date-time
          type: string
        requires_db_reset:
          description: Indicates if the database needs to be reset for the setting
            to take effect
          type: boolean
        requires_restart:
          description: Indicates if the system needs to be restarted for the setting
            to take effect
          type: boolean
        value:
          description: Value of the setting
          type: string
      required:
      - id
      - key
      - value
      - category
      type: object
    SettingRequest:
      properties:
        category:
          description: Category the setting belongs to
          type: string
        description:
          description: Description of the setting
          type: string
        key:
          description: Unique key identifying the setting
          type: string
        requires_db_reset:
          description: Indicates if the database needs to be reset for the setting
            to take effect
          type: boolean
        requires_restart:
          description: Indicates if the system needs to be restarted for the setting
            to take effect
          type: boolean
        value:
          description: Value of the setting
          type: string
      required:
      - key
      - value
      - category
      type: object
    Student:
      properties:
        ag_bookings:
          items:
            $ref: '#/components/schemas/Ag'
          type: array
        bus:
          type: string
        contact_lg:
          type: string
        custom_user:
          $ref: '#/components/schemas/CustomUser'
        group:
          $ref: '#/components/schemas/Group'
        id:
          format: int64
          type: integer
        in_house:
          type: boolean
        name_lg:
          type: string
        school_class:
          type: string
        school_yard:
          type: boolean
        wc:
          type: boolean
      type: object
    StudentList:
      properties:
        group_name:
          type: string
        id:
          format: int64
          type: integer
        in_house:
          type: boolean
        name:
          type: string
        school_class:
          type: string
      type: object
    Timespan:
      properties:
        endtime:
          format: time
          nullable: true
          type: string
        id:
          format: int64
          type: integer
        starttime:
          format: time
          type: string
      type: object
    TokenObtainPair:
      properties:
        password:
          type: string
        username:
          type: string
      required:
      - username
      - password
      type: object
    TokenResponse:
      properties:
        access:
          type: string
        is_otp:
          type: boolean
        refresh:
          type: string
      type: object
    Visit:
      properties:
        day:
          format: date
          type: string
        id:
          format: int64
          type: integer
        room:
          $ref: '#/components/schemas/Room'
        student:
          $ref: '#/components/schemas/StudentList'
        timespan:
          $ref: '#/components/schemas/Timespan'
      type: object
  securitySchemes:
    apiKeyAuth:
      description: |
        API key for device authentication. Provide the API key as a Bearer token in the Authorization header.
        Example: Authorization: Bearer YOUR_API_KEY
      in: header
      name: Authorization
      type: apiKey
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  contact:
    name: MOTO Support
  description: |
    API for the MOTO school management system

    This documentation covers both modern REST API endpoints (ViewSets) and legacy endpoints.
    Legacy endpoints are marked with "(Legacy)" in their summary and are maintained for backward compatibility.

    **Note**: For new integrations, prefer using the modern REST API endpoints rather than legacy endpoints.
  title: MOTO API
  version: 1.0.0
openapi: 3.0.3
paths:
  /ag-categories/:
    get:
      description: Returns a list of all activity group categories
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgCategory'
                type: array
          description: List of AG categories
      summary: List all AG categories
      tags:
      - AGs
  /ags/:
    get:
      description: Returns a list of all activity groups
      parameters:
      - description: Filter AGs by category ID
        in: query
        name: category_id
        schema:
          type: integer
      - description: Filter AGs by supervisor ID
        in: query
        name: supervisor_id
        schema:
          type: integer
      - description: Filter by open AG status
        in: query
        name: is_open_ag
        schema:
          type: boolean
      - description: Search term for AG name
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Ag'
                type: array
          description: List of AGs
      summary: List all AGs
      tags:
      - AGs
    post:
      description: Creates a new activity group with the provided information
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ag_category_id:
                  type: integer
                is_open_ag:
                  type: boolean
                max_participant:
                  type: integer
                name:
                  type: string
                supervisor_id:
                  type: integer
                timeslots:
                  items:
                    properties:
                      endtime:
                        format: time
                        nullable: true
                        type: string
                      starttime:
                        format: time
                        type: string
                      weekday:
                        type: integer
                    type: object
                  type: array
              required:
              - name
              - max_participant
              - supervisor_id
              - ag_category_id
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ag'
          description: AG created
        "400":
          description: Invalid request
      summary: Create a new AG
      tags:
      - AGs
  /ags/{id}/:
    delete:
      description: Deletes a specific activity group
      parameters:
      - description: AG ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: AG deleted
        "404":
          description: AG not found
      summary: Delete an AG
      tags:
      - AGs
    get:
      description: Returns details for a specific activity group
      parameters:
      - description: AG ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ag'
          description: AG details
        "404":
          description: AG not found
      summary: Get AG details
      tags:
      - AGs
    put:
      description: Updates a specific activity group with new information
      parameters:
      - description: AG ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ag'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ag'
          description: AG updated
        "400":
          description: Invalid request
        "404":
          description: AG not found
      summary: Update an AG
      tags:
      - AGs
  /authenticate/:
    post:
      description: Verifies if the current token is valid and returns user information
      responses:
        "200":
          description: Authentication valid
        "401":
          description: Authentication invalid
      summary: Authenticate user
      tags:
      - Authentication
  /change_password/:
    post:
      description: Changes the password for the current user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                new_password:
                  type: string
                old_password:
                  type: string
              required:
              - old_password
              - new_password
              type: object
        required: true
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Invalid request
      summary: Change password
      tags:
      - Authentication
  /change_tag_id/:
    post:
      description: Changes the RFID tag ID for a user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tag_id:
                  type: string
                user_id:
                  type: integer
              required:
              - user_id
              - tag_id
              type: object
        required: true
      responses:
        "200":
          description: Tag ID changed successfully
        "400":
          description: Invalid request
      summary: Change tag ID
      tags:
      - Users
  /combined-groups/:
    get:
      description: Returns a list of all combined groups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CombinedGroup'
                type: array
          description: List of combined groups
      summary: List all combined groups
      tags:
      - Groups
  /get_active_room_information/:
    get:
      description: Returns information about active rooms (Legacy endpoint)
      parameters:
      - description: Device ID
        in: query
        name: device_id
        schema:
          type: string
      responses:
        "200":
          description: Active room information
        "404":
          description: No active room found
      summary: Get active room information (Legacy)
      tags:
      - Rooms
  /get_room_list/:
    get:
      description: |
        Returns a list of all rooms (Legacy endpoint).
        **Deprecated**: Use the `/rooms/` endpoint instead.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Room'
                type: array
          description: List of rooms
      summary: Get room list (Legacy)
      tags:
      - Rooms
  /get_user_by_id/{id}/:
    get:
      description: Returns details for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PedagogicalSpecialist'
          description: User details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Get user by ID
      tags:
      - Users
  /get_user_educational_specialist_without_supervision/:
    get:
      description: Returns a list of educational specialists without assigned supervision
        duties
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PedagogicalSpecialist'
                type: array
          description: List of educational specialists without supervision
      summary: Get educational specialists without supervision
      tags:
      - Users
  /get_user_list/:
    get:
      description: Returns a list of all users
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PedagogicalSpecialist'
                type: array
          description: List of users
      summary: Get user list
      tags:
      - Users
  /give_feedback/:
    post:
      description: Submits user feedback
      requestBody:
        content:
          application/json:
            schema:
              properties:
                feedback_value:
                  type: integer
                mensa_feedback:
                  type: boolean
                student_id:
                  type: integer
              required:
              - student_id
              - feedback_value
              type: object
        required: true
      responses:
        "201":
          description: Feedback submitted successfully
        "400":
          description: Invalid request
      summary: Give feedback
      tags:
      - Users
  /groups/:
    get:
      description: Returns a list of all groups
      parameters:
      - description: Filter groups by supervisor ID
        in: query
        name: supervisor_id
        schema:
          type: integer
      - description: Search term for group name
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: List of groups
      summary: List all groups
      tags:
      - Groups
    post:
      description: Creates a new group with the provided information
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                representative_id:
                  nullable: true
                  type: integer
                room_id:
                  nullable: true
                  type: integer
                supervisor_ids:
                  items:
                    type: integer
                  type: array
              required:
              - name
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group created
        "400":
          description: Invalid request
      summary: Create a new group
      tags:
      - Groups
  /groups/{id}/:
    delete:
      description: Deletes a specific group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Group deleted
        "404":
          description: Group not found
      summary: Delete a group
      tags:
      - Groups
    get:
      description: Returns details for a specific group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group details
        "404":
          description: Group not found
      summary: Get group details
      tags:
      - Groups
    put:
      description: Updates a specific group with new information
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Group updated
        "400":
          description: Invalid request
        "404":
          description: Group not found
      summary: Update a group
      tags:
      - Groups
  /login/:
    post:
      description: |
        Authenticates a user and returns JWT access and refresh tokens.
        If user is a pedagogical specialist with OTP enabled, is_otp will be true.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Successful authentication
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authentication failed
      security: []
      summary: Login to obtain JWT token
      tags:
      - Authentication
  /logout/:
    post:
      description: Logs out the current user by blacklisting their refresh token
      responses:
        "200":
          description: Successful logout
        "401":
          description: Unauthorized
      summary: Logout user
      tags:
      - Authentication
  /merge_rooms/:
    post:
      description: |
        Merges source room into target room.
        Students from source room will be transferred to target room.
        If both rooms are group rooms, creates a combined group instead.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                source_room_id:
                  description: ID of the source room to merge
                  type: integer
                target_room_id:
                  description: ID of the target room to merge into
                  type: integer
              required:
              - source_room_id
              - target_room_id
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  combined_group:
                    $ref: '#/components/schemas/CombinedGroup'
                  message:
                    type: string
                  transferred_students:
                    items:
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                      type: object
                    type: array
                type: object
          description: Rooms merged successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room not found
      summary: Merge two rooms (Legacy)
      tags:
      - Rooms
  /process_tag_scan/:
    post:
      description: Processes an RFID tag scan event
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_id:
                  type: string
                tag_id:
                  type: string
              required:
              - tag_id
              - device_id
              type: object
        required: true
      responses:
        "200":
          description: Tag scan processed successfully
        "400":
          description: Invalid request
      summary: Process tag scan
      tags:
      - Users
  /public/supervisors/:
    get:
      description: |
        Returns a list of supervisors for public access.
        This endpoint does not require authentication.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    first_name:
                      type: string
                    id:
                      type: integer
                    role:
                      type: string
                    second_name:
                      type: string
                    user_id:
                      type: integer
                  type: object
                type: array
          description: List of supervisors
      security: []
      summary: Get public supervisors list
      tags:
      - Public
  /public/users/:
    get:
      description: |
        Returns a list of users for public access.
        This endpoint does not require authentication.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    first_name:
                      type: string
                    id:
                      type: integer
                    second_name:
                      type: string
                    tag_id:
                      nullable: true
                      type: string
                  type: object
                type: array
          description: List of users
      security: []
      summary: Get public user list
      tags:
      - Public
  /register_student_in_room/:
    post:
      description: Registers a student in a room (Legacy endpoint)
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_id:
                  type: string
                student_id:
                  type: integer
              required:
              - student_id
              - device_id
              type: object
        required: true
      responses:
        "200":
          description: Student registered successfully
        "400":
          description: Invalid request
      summary: Register student in room (Legacy)
      tags:
      - Rooms
  /register_tablet_to_room/:
    post:
      description: |
        Registers a tablet to a room (Legacy endpoint).
        **Deprecated**: Use the `/rooms/{id}/register_tablet/` endpoint instead.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ag_id:
                  description: Activity Group ID if this room is for a specific AG
                  nullable: true
                  type: integer
                device_id:
                  description: Unique identifier for the tablet/device
                  type: string
                group_id:
                  description: Group ID if this room is for a specific group
                  nullable: true
                  type: integer
                room_id:
                  description: ID of the room to register the tablet to
                  type: integer
                supervisor_id:
                  description: Single supervisor ID for backward compatibility
                  type: integer
                supervisor_ids:
                  description: Array of supervisor IDs
                  items:
                    type: integer
                  type: array
              required:
              - room_id
              - device_id
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                type: object
          description: Tablet registered successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room or other resource not found
      summary: Register tablet to room (Legacy)
      tags:
      - Rooms
  /rfid/app/status:
    get:
      description: |
        Returns system status information for Tauri desktop applications.
        Can be called without authentication, but provides more detail with a valid API key.
      parameters:
      - description: Optional API key for authenticated status checks
        in: query
        name: api_key
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  stats:
                    properties:
                      students_in_house:
                        type: integer
                      students_in_school_yard:
                        type: integer
                      students_in_wc:
                        type: integer
                      tag_count:
                        type: integer
                    type: object
                  status:
                    enum:
                    - ok
                    - warning
                    - error
                    type: string
                  timestamp:
                    format: date-time
                    type: string
                  version:
                    type: string
                type: object
          description: System status information
      summary: Get Tauri app system status
      tags:
      - RFID
  /rfid/app/sync:
    post:
      description: |
        Synchronizes RFID tag data from a Tauri desktop application.
        Requires authentication with a valid API key in the Authorization header (Bearer token).
      requestBody:
        content:
          application/json:
            schema:
              properties:
                app_version:
                  description: Version of the Tauri app
                  type: string
                data:
                  description: Array of tag records to synchronize
                  items:
                    properties:
                      reader_id:
                        type: string
                      tag_id:
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                    type: object
                  type: array
                device_id:
                  description: Unique identifier for the Tauri app device
                  type: string
              required:
              - device_id
              - data
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                type: object
          description: Sync successful
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Sync Tauri app data
      tags:
      - RFID
  /rfid/devices:
    get:
      description: Returns a list of all registered Tauri devices.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created_at:
                      format: date-time
                      type: string
                    description:
                      type: string
                    device_id:
                      type: string
                    id:
                      format: int64
                      type: integer
                    last_ip:
                      type: string
                    last_sync_at:
                      format: date-time
                      nullable: true
                      type: string
                    name:
                      type: string
                    status:
                      enum:
                      - active
                      - inactive
                      - blocked
                      type: string
                    updated_at:
                      format: date-time
                      type: string
                  type: object
                type: array
          description: List of devices
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
      security:
      - apiKeyAuth: []
      summary: List all Tauri devices
      tags:
      - RFID
    post:
      description: |
        Registers a new Tauri desktop application device and generates an API key.
        The API key is only returned once during registration.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Optional description of the device
                  type: string
                device_id:
                  description: Unique identifier for the device
                  type: string
                name:
                  description: Human-readable name for the device
                  type: string
              required:
              - device_id
              - name
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  api_key:
                    description: API key for device authentication (only returned
                      once)
                    type: string
                  device:
                    properties:
                      created_at:
                        format: date-time
                        type: string
                      description:
                        type: string
                      device_id:
                        type: string
                      id:
                        format: int64
                        type: integer
                      name:
                        type: string
                      status:
                        enum:
                        - active
                        - inactive
                        - blocked
                        type: string
                      updated_at:
                        format: date-time
                        type: string
                    type: object
                  device_id:
                    type: string
                  message:
                    type: string
                  success:
                    type: boolean
                type: object
          description: Device registered successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Register a new Tauri device
      tags:
      - RFID
  /rfid/devices/{device_id}:
    get:
      description: Returns detailed information about a specific Tauri device.
      parameters:
      - description: Device ID
        in: path
        name: device_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created_at:
                    format: date-time
                    type: string
                  description:
                    type: string
                  device_id:
                    type: string
                  id:
                    format: int64
                    type: integer
                  last_ip:
                    type: string
                  last_sync_at:
                    format: date-time
                    nullable: true
                    type: string
                  name:
                    type: string
                  status:
                    enum:
                    - active
                    - inactive
                    - blocked
                    type: string
                  updated_at:
                    format: date-time
                    type: string
                type: object
          description: Device details
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Device not found
      security:
      - apiKeyAuth: []
      summary: Get Tauri device details
      tags:
      - RFID
    put:
      description: Updates information for a specific Tauri device.
      parameters:
      - description: Device ID
        in: path
        name: device_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Description of the device
                  type: string
                name:
                  description: Human-readable name for the device
                  type: string
                status:
                  description: Device status
                  enum:
                  - active
                  - inactive
                  - blocked
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  created_at:
                    format: date-time
                    type: string
                  description:
                    type: string
                  device_id:
                    type: string
                  id:
                    format: int64
                    type: integer
                  last_ip:
                    type: string
                  last_sync_at:
                    format: date-time
                    nullable: true
                    type: string
                  name:
                    type: string
                  status:
                    enum:
                    - active
                    - inactive
                    - blocked
                    type: string
                  updated_at:
                    format: date-time
                    type: string
                type: object
          description: Device updated successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Device not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Update Tauri device
      tags:
      - RFID
  /rfid/devices/{device_id}/sync-history:
    get:
      description: Returns synchronization history for a specific Tauri device.
      parameters:
      - description: Device ID
        in: path
        name: device_id
        required: true
        schema:
          type: string
      - description: Maximum number of records to return (default 50)
        in: query
        name: limit
        schema:
          default: 50
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    app_version:
                      type: string
                    created_at:
                      format: date-time
                      type: string
                    device_id:
                      type: string
                    id:
                      format: int64
                      type: integer
                    ip_address:
                      type: string
                    tags_count:
                      type: integer
                  type: object
                type: array
          description: Device sync history
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Device not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request parameters
      security:
      - apiKeyAuth: []
      summary: Get device sync history
      tags:
      - RFID
  /rfid/room-entry:
    post:
      description: Records a student entering a room using their RFID tag.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reader_id:
                  description: The unique ID of the RFID reader that scanned the tag
                  type: string
                room_id:
                  description: The ID of the room being entered
                  format: int64
                  type: integer
                tag_id:
                  description: The unique ID of the RFID tag
                  type: string
              required:
              - tag_id
              - reader_id
              - room_id
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  room_id:
                    format: int64
                    type: integer
                  student_count:
                    description: Number of students currently in the room
                    type: integer
                  student_id:
                    format: int64
                    type: integer
                  success:
                    type: boolean
                type: object
          description: Room entry recorded successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Record student room entry
      tags:
      - RFID
  /rfid/room-exit:
    post:
      description: Records a student exiting a room using their RFID tag.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reader_id:
                  description: The unique ID of the RFID reader that scanned the tag
                  type: string
                room_id:
                  description: The ID of the room being exited
                  format: int64
                  type: integer
                tag_id:
                  description: The unique ID of the RFID tag
                  type: string
              required:
              - tag_id
              - reader_id
              - room_id
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  room_id:
                    format: int64
                    type: integer
                  student_count:
                    description: Number of students remaining in the room
                    type: integer
                  student_id:
                    format: int64
                    type: integer
                  success:
                    type: boolean
                type: object
          description: Room exit recorded successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Record student room exit
      tags:
      - RFID
  /rfid/room-occupancy:
    get:
      description: Returns the current occupancy for a room or all rooms.
      parameters:
      - description: Optional room ID to get occupancy for a specific room
        in: query
        name: room_id
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                - properties:
                    room_id:
                      format: int64
                      type: integer
                    room_name:
                      type: string
                    student_count:
                      type: integer
                    students:
                      items:
                        properties:
                          name:
                            type: string
                          student_id:
                            format: int64
                            type: integer
                        type: object
                      type: array
                  type: object
                - items:
                    properties:
                      room_id:
                        format: int64
                        type: integer
                      room_name:
                        type: string
                      student_count:
                        type: integer
                    type: object
                  type: array
          description: Room occupancy information
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
      security:
      - apiKeyAuth: []
      summary: Get room occupancy
      tags:
      - RFID
  /rfid/room/{id}/visits:
    get:
      description: Returns visit records for a specific room, optionally filtered
        by date and active status.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Optional date filter (format YYYY-MM-DD)
        in: query
        name: date
        schema:
          format: date
          type: string
      - description: Filter for active visits only
        in: query
        name: active
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Visit'
                type: array
          description: Room visit records
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request parameters
      security:
      - apiKeyAuth: []
      summary: Get room visits
      tags:
      - RFID
  /rfid/student/{id}/visits:
    get:
      description: Returns visit records for a specific student, optionally filtered
        by date.
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Optional date filter (format YYYY-MM-DD)
        in: query
        name: date
        schema:
          format: date
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Visit'
                type: array
          description: Student visit records
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request parameters
      security:
      - apiKeyAuth: []
      summary: Get student visits
      tags:
      - RFID
  /rfid/tag:
    post:
      description: |
        Records a tag read from an RFID reader. Used by RFID readers to submit tag data to the system.
        This endpoint requires API key authentication.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reader_id:
                  description: The unique ID of the RFID reader that scanned the tag
                  type: string
                tag_id:
                  description: The unique ID of the RFID tag
                  type: string
              required:
              - tag_id
              - reader_id
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  created_at:
                    format: date-time
                    type: string
                  id:
                    format: int64
                    type: integer
                  reader_id:
                    type: string
                  tag_id:
                    type: string
                type: object
          description: Tag read recorded successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Record RFID tag read
      tags:
      - RFID
  /rfid/tags:
    get:
      description: Returns a list of all RFID tag reads recorded in the system.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    created_at:
                      format: date-time
                      type: string
                    id:
                      format: int64
                      type: integer
                    reader_id:
                      type: string
                    tag_id:
                      type: string
                  type: object
                type: array
          description: List of tag reads
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
      security:
      - apiKeyAuth: []
      summary: Get all recorded RFID tags
      tags:
      - RFID
  /rfid/track-student:
    post:
      description: |
        Updates student location based on RFID tag scans from different reader types.
        Used for tracking student movement between locations (entry, bathroom, schoolyard, exit).
      requestBody:
        content:
          application/json:
            schema:
              properties:
                location_type:
                  description: Type of location update (entry, wc, schoolyard, exit)
                  enum:
                  - entry
                  - wc
                  - schoolyard
                  - exit
                  type: string
                reader_id:
                  description: The unique ID of the RFID reader that scanned the tag
                  type: string
                tag_id:
                  description: The unique ID of the RFID tag
                  type: string
              required:
              - tag_id
              - reader_id
              - location_type
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  location:
                    type: string
                  message:
                    type: string
                  name:
                    type: string
                  student_id:
                    format: int64
                    type: integer
                  success:
                    type: boolean
                type: object
          description: Student tracking successful
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request data
      security:
      - apiKeyAuth: []
      summary: Track student location
      tags:
      - RFID
  /rfid/visits/today:
    get:
      description: Returns all visit records for the current day.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Visit'
                type: array
          description: Today's visit records
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Invalid API key
      security:
      - apiKeyAuth: []
      summary: Get today's visits
      tags:
      - RFID
  /room-history/:
    get:
      description: Returns history of room usage
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomHistory'
                type: array
          description: Room history
      summary: Get room history
      tags:
      - Visits
  /room-occupancies/:
    get:
      description: Returns a list of all current room occupancies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomOccupancyDetail'
                type: array
          description: List of room occupancies
      summary: List all room occupancies
      tags:
      - Room Occupancies
  /room-occupancies/{id}/:
    get:
      description: Returns details for a specific room occupancy
      parameters:
      - description: Room Occupancy ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomOccupancyDetail'
          description: Room occupancy details
        "404":
          description: Room occupancy not found
      summary: Get room occupancy details
      tags:
      - Room Occupancies
  /rooms/:
    get:
      description: Returns a list of all rooms, with optional filtering
      parameters:
      - description: Filter by room category
        in: query
        name: category
        schema:
          type: string
      - description: Filter by building
        in: query
        name: building
        schema:
          type: string
      - description: Filter by floor
        in: query
        name: floor
        schema:
          type: integer
      - description: Filter by occupancy status
        in: query
        name: occupied
        schema:
          type: boolean
      - description: Search term for room name, category, or building
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Room'
                type: array
          description: List of rooms
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Authentication required
      summary: List all rooms
      tags:
      - Rooms
  /rooms/{id}/:
    delete:
      description: Deletes a specific room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Room deleted
        "404":
          description: Room not found
      summary: Delete a room
      tags:
      - Rooms
    get:
      description: Returns details for a specific room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Room details
        "404":
          description: Room not found
      summary: Get room details
      tags:
      - Rooms
    put:
      description: Updates a specific room with new information
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Room updated
        "404":
          description: Room not found
      summary: Update a room
      tags:
      - Rooms
  /rooms/{id}/current_occupancy/:
    get:
      description: Returns the current occupancy for a specific room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomOccupancyDetail'
          description: Room occupancy details
        "404":
          description: Room is not currently occupied
      summary: Get current room occupancy
      tags:
      - Rooms
  /rooms/{id}/register_tablet/:
    post:
      description: |
        Registers a tablet to a specific room.
        This endpoint creates a Room_occupancy entry that links a tablet (device_id) to a room.
        Either a group or an AG (activity group) must be specified.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ag:
                  description: Create a new AG for this room occupancy
                  nullable: true
                  properties:
                    ag_category:
                      description: AG category ID
                      type: integer
                    is_open_ag:
                      description: Whether this AG is open for registration
                      type: boolean
                    max_participant:
                      description: Maximum number of participants allowed
                      type: integer
                    name:
                      description: Name of the new AG
                      type: string
                  type: object
                ag_id:
                  description: Activity Group ID if this room is for a specific AG
                  nullable: true
                  type: integer
                device_id:
                  description: Unique identifier for the tablet/device
                  type: string
                group:
                  description: Group ID if this room is for a specific group
                  nullable: true
                  type: integer
                supervisors:
                  description: Array of Pedagogical_specialist IDs who will supervise
                    this room
                  items:
                    type: integer
                  type: array
              required:
              - device_id
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  ag:
                    nullable: true
                    type: integer
                  device_id:
                    type: string
                  group:
                    nullable: true
                    type: integer
                  id:
                    type: integer
                  supervisor:
                    items:
                      type: integer
                    type: array
                  timespan:
                    type: integer
                type: object
          description: Tablet registered successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room not found
      summary: Register tablet to room
      tags:
      - Rooms
  /rooms/{id}/unregister_tablet/:
    post:
      description: Unregisters a tablet from a specific room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_id:
                  type: string
              required:
              - device_id
              type: object
        required: true
      responses:
        "200":
          description: Tablet unregistered successfully
        "400":
          description: Invalid request
        "404":
          description: No tablet registered with this device ID in this room
      summary: Unregister tablet from room
      tags:
      - Rooms
  /rooms/{id}/visits/:
    get:
      description: Returns all student visits for a specific room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: Filter by date
        in: query
        name: date
        schema:
          format: date
          type: string
      - description: Filter by active status
        in: query
        name: active
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Visit'
                type: array
          description: List of visits
      summary: Get room visits
      tags:
      - Rooms
  /rooms/choose/:
    get:
      description: Returns a list of rooms formatted for room selection UI
      parameters:
      - description: Device ID for context
        in: query
        name: device_id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    building:
                      type: string
                    capacity:
                      type: integer
                    category:
                      type: string
                    color:
                      type: string
                    floor:
                      type: integer
                    id:
                      type: integer
                    occupied:
                      type: boolean
                    room_name:
                      type: string
                  type: object
                type: array
          description: List of rooms available for selection
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - Authentication required
      summary: Get rooms for selection
      tags:
      - Rooms
    post:
      description: Creates a new room with the provided information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Room created
        "400":
          description: Invalid request
      summary: Create a new room
      tags:
      - Rooms
  /rooms/grouped_by_category/:
    get:
      description: Returns rooms grouped by their categories
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    category:
                      type: string
                    rooms:
                      items:
                        $ref: '#/components/schemas/Room'
                      type: array
                  type: object
                type: array
          description: Rooms grouped by category
      summary: Get rooms grouped by category
      tags:
      - Rooms
  /rooms/merge/:
    post:
      description: |
        Merges source room into target room.
        Students from source room will be transferred to target room.
        Creates a combined group for the merged rooms.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                source_room_id:
                  description: ID of the source room to merge
                  type: integer
                target_room_id:
                  description: ID of the target room to merge into
                  type: integer
              required:
              - source_room_id
              - target_room_id
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  combined_group:
                    $ref: '#/components/schemas/CombinedGroup'
                  message:
                    type: string
                  success:
                    type: boolean
                type: object
          description: Rooms merged successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room not found
      summary: Merge two rooms
      tags:
      - Rooms
  /settings:
    get:
      description: Returns a list of all system settings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Setting'
                type: array
          description: Successfully retrieved settings list
        "401":
          description: Unauthorized - Authentication required
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: List all settings
      tags:
      - Settings
    post:
      description: Creates a new system setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
          description: Setting created successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthorized - Authentication required
        "409":
          description: Conflict - Setting with this key already exists
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Create a new setting
      tags:
      - Settings
  /settings/:
    get:
      description: Returns a list of all system settings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Setting'
                type: array
          description: List of settings
      summary: List all settings
      tags:
      - Settings
  /settings/{id}:
    delete:
      description: Deletes a setting by its ID
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Setting deleted successfully
        "401":
          description: Unauthorized - Authentication required
        "404":
          description: Setting not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Delete a setting by ID
      tags:
      - Settings
    get:
      description: Returns a single setting by its ID
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
          description: Successfully retrieved setting
        "401":
          description: Unauthorized - Authentication required
        "404":
          description: Setting not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Get a setting by ID
      tags:
      - Settings
    put:
      description: Updates an existing setting by its ID
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
          description: Setting updated successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthorized - Authentication required
        "404":
          description: Setting not found
        "409":
          description: Conflict - Setting with this key already exists
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Update a setting by ID
      tags:
      - Settings
  /settings/category/{category}:
    get:
      description: Returns all settings in a specific category
      parameters:
      - description: Settings category
        in: path
        name: category
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Setting'
                type: array
          description: Successfully retrieved settings
        "401":
          description: Unauthorized - Authentication required
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Get settings by category
      tags:
      - Settings
  /settings/key/{key}:
    get:
      description: Returns a single setting by its key
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
          description: Successfully retrieved setting
        "401":
          description: Unauthorized - Authentication required
        "404":
          description: Setting not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Get a setting by key
      tags:
      - Settings
    patch:
      description: Updates the value of an existing setting by its key
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                value:
                  description: New value for the setting
                  type: string
              required:
              - value
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
          description: Setting value updated successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthorized - Authentication required
        "404":
          description: Setting not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Update a setting value by key
      tags:
      - Settings
  /students/:
    get:
      description: Returns a list of all students
      parameters:
      - description: Filter students by group ID
        in: query
        name: group_id
        schema:
          type: integer
      - description: Search term for student name
        in: query
        name: search
        schema:
          type: string
      - description: Filter by in-house status
        in: query
        name: in_house
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Student'
                type: array
          description: List of students
      summary: List all students
      tags:
      - Students
    post:
      description: Creates a new student with the provided information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: Student created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
      summary: Create a new student
      tags:
      - Students
  /students/{id}/:
    delete:
      description: Deletes a specific student
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Student deleted
        "404":
          description: Student not found
      summary: Delete a student
      tags:
      - Students
    get:
      description: Returns details for a specific student
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: Student details
        "404":
          description: Student not found
      summary: Get student details
      tags:
      - Students
    patch:
      description: Partially updates a specific student with new information
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: Student updated
        "400":
          description: Invalid request
        "404":
          description: Student not found
      summary: Partially update a student
      tags:
      - Students
    put:
      description: Updates a specific student with new information
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: Student updated
        "400":
          description: Invalid request
        "404":
          description: Student not found
      summary: Update a student
      tags:
      - Students
  /token/refresh/:
    post:
      description: |
        Refreshes an expired JWT access token using a valid refresh token.
        Returns a new access token.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refresh:
                  description: Valid refresh token
                  type: string
              required:
              - refresh
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  access:
                    description: New access token
                    type: string
                type: object
          description: Successfully refreshed token
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid or expired refresh token
      security: []
      summary: Refresh JWT token
      tags:
      - Authentication
  /unregister_student_from_room/:
    post:
      description: Unregisters a student from a room (Legacy endpoint)
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_id:
                  type: string
                student_id:
                  type: integer
              required:
              - student_id
              - device_id
              type: object
        required: true
      responses:
        "200":
          description: Student unregistered successfully
        "400":
          description: Invalid request
      summary: Unregister student from room (Legacy)
      tags:
      - Rooms
  /unregister_tablet_from_room/:
    post:
      description: Unregisters a tablet from a room (Legacy endpoint)
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_id:
                  type: string
              required:
              - device_id
              type: object
        required: true
      responses:
        "200":
          description: Tablet unregistered successfully
        "400":
          description: Invalid request
      summary: Unregister tablet from room (Legacy)
      tags:
      - Rooms
  /update_room/:
    post:
      description: Updates room occupancy information (Legacy endpoint)
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_id:
                  type: string
              required:
              - device_id
              type: object
        required: true
      responses:
        "200":
          description: Room occupancy updated successfully
        "400":
          description: Invalid request
      summary: Update room occupancy (Legacy)
      tags:
      - Rooms
  /visits/:
    get:
      description: Returns a list of all student visits
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Visit'
                type: array
          description: List of visits
      summary: List all visits
      tags:
      - Visits
security:
- bearerAuth: []
servers:
- description: API Base URL
  url: /api
