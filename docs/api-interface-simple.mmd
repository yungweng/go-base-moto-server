flowchart TB
%% Title of the diagram
    title[<u>MOTO API Interface Diagram</u><br>v1.0.0]
    style title fill:none,stroke:none

%% Client Interfaces
    subgraph Clients["Client Applications"]
        Browser["Web Admin<br>(Browser)"]
        RFID["RFID Python-Daemon<br>(API-Key Auth)"]
        Tauri["Tauri Desktop App<br>(JWT Auth)"]
    end

%% API Gateway
    subgraph Gateway["API Gateway"]
        NGINX["NGINX Load Balancer<br>Port: 443/HTTPS"]
    end

%% Backend Services
    subgraph BackendServices["Backend Services"]
        GoAPI["Go API<br>Port: 8080"]
        AdminWebsite["Admin Website<br>(SSR - Node.js)<br>Port: 3000"]
    end

%% Database
    subgraph DatabaseCluster["Database Cluster"]
        PostgreSQL["PostgreSQL v15+<br>Port: 5432"]
    end

%% Authentication
    subgraph Auth["Authentication"]
        JWTAuth["JWT Authentication"]
        APIKeyAuth["API Key Authentication"]
    end

%% API Endpoints
    subgraph Endpoints["API Endpoints"]
    %% Authentication Endpoints
        subgraph AuthEndpoints["Authentication"]
            Login["/login"]
            TokenRefresh["/token/refresh"]
            Logout["/logout"]
            ChangePassword["/change_password"]
        end

    %% Room Management
        subgraph RoomEndpoints["Rooms"]
            RoomsList["/rooms"]
            RoomDetail["/rooms/{id}"]
            RoomMerge["/rooms/merge"]
            RoomOccupancy["/rooms/{id}/current_occupancy"]
            RoomVisits["/rooms/{id}/visits"]
            RoomRegisterTablet["/rooms/{id}/register_tablet"]
            RoomUnregisterTablet["/rooms/{id}/unregister_tablet"]
            RoomsByCategory["/rooms/grouped_by_category"]
            RoomSelect["/rooms/choose"]
        end

    %% User Management
        subgraph UserEndpoints["Users"]
            UserById["/users/{id}"]
            UsersList["/users"]
            UserSpecialists["/users/specialists"]
            ChangeTag["/users/change_tag"]
            ProcessTag["/users/scan_tag"]
        end

    %% Student Management
        subgraph StudentEndpoints["Students"]
            StudentsList["/students"]
            StudentDetail["/students/{id}"]
            GiveFeedback["/students/feedback"]
        end

    %% Group Management
        subgraph GroupEndpoints["Groups"]
            GroupsList["/groups"]
            GroupDetail["/groups/{id}"]
            CombinedGroups["/combined-groups"]
        end

    %% AG (Activity) Management
        subgraph AGEndpoints["Activities"]
            AGsList["/ags"]
            AGDetail["/ags/{id}"]
            AGCategories["/ag-categories"]
        end

    %% Visit Management
        subgraph VisitEndpoints["Visits"]
            VisitsList["/visits"]
            RoomHistory["/room-history"]
        end

    %% Room Occupancy
        subgraph OccupancyEndpoints["Occupancies"]
            OccupanciesList["/room-occupancies"]
            OccupancyDetail["/room-occupancies/{id}"]
        end

    %% Settings
        subgraph SettingEndpoints["Settings"]
            SettingsList["/settings"]
        end
    end

%% Connections between Components
%% Clients to Gateway
    Browser -->|"HTTPS (443)<br>JWT Auth"| NGINX
    RFID -->|"HTTPS (443)<br>API-Key Auth"| NGINX
    Tauri -->|"HTTPS (443)<br>JWT Auth"| NGINX

%% Gateway to Backend
    NGINX -->|"HTTP (8080)"| GoAPI
    NGINX -->|"HTTP (3000)"| AdminWebsite

%% Backend to Database
    GoAPI -->|"SQL (5432)"| PostgreSQL
    AdminWebsite -->|"HTTP (8080)"| GoAPI

%% Authentication Flows
    Browser -->|"Login Request"| JWTAuth
    Tauri -->|"Login Request"| JWTAuth
    RFID -->|"Authentication"| APIKeyAuth
    JWTAuth -->|"Valid Token"| GoAPI
    APIKeyAuth -->|"Valid API Key"| GoAPI

%% Endpoint Relationships
    GoAPI --- Endpoints

%% Legend
    subgraph Legend["Legend"]
        direction LR
        Client["Client Application"]
        Service["API Service"]
        Endpoint["API Endpoint"]
        Database["Database"]
        Auth_["Authentication"]
        DirectionalFlow["Unidirectional Flow"] --> FlowReceiver["Receiver"]
        BidirectionalFlow["Bidirectional Flow"] <--> FlowPartner["Partner"]
    end
    style Legend fill:white,stroke:#999,stroke-dasharray: 5 5
    style Client fill:#f9f9f9,stroke:#000
    style Service fill:#d4f1f9,stroke:#000
    style Endpoint fill:#e1f5c4,stroke:#000
    style Database fill:#ffe6cc,stroke:#000
    style Auth_ fill:#e6ccff,stroke:#000
    style FlowReceiver,FlowPartner fill:white,stroke:#000

%% Styles for components
    classDef client fill:#f9f9f9,stroke:#000,stroke-width:1px
    classDef service fill:#d4f1f9,stroke:#000,stroke-width:1px
    classDef endpoint fill:#e1f5c4,stroke:#000,stroke-width:1px
    classDef database fill:#ffe6cc,stroke:#000,stroke-width:1px
    classDef auth fill:#e6ccff,stroke:#000,stroke-width:1px

    class Browser,RFID,Tauri client
    class NGINX,GoAPI,AdminWebsite service
    class AuthEndpoints,RoomEndpoints,UserEndpoints,StudentEndpoints,GroupEndpoints,AGEndpoints,VisitEndpoints,OccupancyEndpoints,SettingEndpoints endpoint
    class PostgreSQL database
    class JWTAuth,APIKeyAuth auth

%% API Documentation Notes
    ApiNotes["
        <b>API Notes:</b>
- All endpoints require authentication except where noted
- JWT authentication used for Browser and Tauri clients
- API Key authentication used for RFID Daemon
- All responses in JSON format
- Pagination supported where resource lists can be large
- API version included in URL path (e.g., /api/v1)
"]
style ApiNotes fill:lightyellow,stroke:#999,stroke-width:1px,stroke-dasharray: 3 3

%% HTTP Method Availability
HttpMethods["
<b>HTTP Methods:</b>
- GET: Retrieve resources
- POST: Create new resources
- PUT: Update resources (full update)
- PATCH: Partial resource update
- DELETE: Remove resources
"]
style HttpMethods fill:lightyellow,stroke:#999,stroke-width:1px,stroke-dasharray: 3 3